#
# Copyright 2017, Data61
# Commonwealth Scientific and Industrial Research Organisation (CSIRO)
# ABN 41 687 119 230.
#
# This software may be distributed and modified according to the terms of
# the BSD 2-Clause license. Note that NO WARRANTY is provided.
# See "LICENSE_BSD2.txt" for details.
#
# @TAG(DATA61_BSD)
#

cmake_minimum_required(VERSION 3.5.1)

project(libmuslc NONE)

set(LIB_MUSLC_PARALLEL_BUILD true CACHE BOOL "Use `make -j` when building libmuslc")

# Map KernelSel4Arch to muslc architecture.
set(
    arch_mapping # element format: "KernelSel4Arch[:muslc_arch]"
    "ia32:i386"
    "x86_64" # use KernelSel4Arch
    "aarch32:arm"
    "arm_hyp:arm" # arm_hyp is legacy hack that might get removed one day
    "aarch64" # use KernelSel4Arch
    "riscv32" # use KernelSel4Arch
    "riscv64" # use KernelSel4Arch
)
# Find the tuple with the mapping information. If KernelSel4Arch is not set at
# all, matching will fail.
if(NOT ";${arch_mapping};" MATCHES ";${KernelSel4Arch}(:([^;]*))?;")
    message(FATAL_ERROR "unsupported KernelSel4Arch: '${KernelSel4Arch}'")
elseif(CMAKE_MATCH_2)
    set(muslc_arch "${CMAKE_MATCH_2}")
else()
    set(muslc_arch "${KernelSel4Arch}")
endif()

message(
    STATUS "${PROJECT_NAME} architecture: '${muslc_arch}' (from KernelSel4Arch '${KernelSel4Arch}')"
)

# Fatal error if wrong ARM tls setting is detected.
# TODO: It's possible to make some additional patch files to overwrite the parts of muslc that directly access the TLS registers
# and then these guards could be removed. But most people should be using the right TLS config anyway.
if (KernelSel4ArchAarch32 AND KernelArmTLSRegTPIDRU)
    message(FATAL_ERROR
        "Unsupported thread-local-storage (TLS) settings detected: \
        KernelSel4Arch is set to aarch32. KernelArmTLSReg is set to tpidru but only tpidruro is supported with this version of musllibc.")
endif()
if (KernelSel4ArchAarch64 AND KernelArmTLSRegTPIDRURO)
    message(FATAL_ERROR
        "Unsupported thread-local-storage (TLS) settings detected: \
        KernelSel4Arch is set to aarch64. KernelArmTLSReg is set to tpidruro but only tpidru is supported with this version of musllibc.")
endif()
set(
    LIB_MUSLC_GLOB_SOURCES OFF
    CACHE BOOL "This flag causes CMake to add lots of source files to its dependency lists
     which slows down its configuration times.
     When not making changes in the musllibc directory, it is likely not
     necessary to have this enabled."
)
mark_as_advanced(LIB_MUSLC_PARALLEL_BUILD LIB_MUSLC_GLOB_SOURCES)
if(LIB_MUSLC_GLOB_SOURCES)
    file(
        GLOB_RECURSE
            deps
            **/*.c
            **/*.h
            **/*.S
            **/*.s
    )
endif()

set(parallel "")
if(LIB_MUSLC_PARALLEL_BUILD)
    include(ProcessorCount)
    ProcessorCount(N)
    if(N EQUAL 0)
        message(WARNING "Could not detect ProcessorCount for building musllibc.")
    else()
        # We set tasks to number of CPUs + 2 to account for blocking IO, this is
        # a similar heuristic to what Ninja uses by default. Note that this gets
        # used in a rule generated by add_custom_command and is additive with
        # any existing Ninja jobs.
        math(EXPR Nplus2 "${N} + 2")
        set(parallel "-j${Nplus2}")
    endif()
endif()

# We make an attempt to extract compiler options from CMake
get_property(compile_options DIRECTORY PROPERTY COMPILE_OPTIONS)

# Also inherit the CMAKE build type flags from one of the following variables
# depending on the configured build type:
# - CMAKE_C_FLAGS_DEBUG
# - CMAKE_C_FLAGS_RELEASE
# - CMAKE_C_FLAGS_RELWITHDEBINFO
# - CMAKE_C_FLAGS_MINSIZEREL
string(TOUPPER CMAKE_BUILD_TYPE build_type)
set(cmake_built_type_config_name CMAKE_C_FLAGS_${build_type})
separate_arguments(
    cmake_c_flags_sep NATIVE_COMMAND "${CMAKE_C_FLAGS};${${cmake_built_type_config_name}}"
)

list(APPEND compile_options "${cmake_c_flags_sep}")

# Add the target triple to the compile flags if we are using clang
# It is not part of the CMAKE_C_FLAGS variable
if(CMAKE_C_COMPILER_ID STREQUAL "Clang")
    list(APPEND compile_options "${CMAKE_C_COMPILE_OPTIONS_TARGET}${CMAKE_C_COMPILER_TARGET}")
endif()

set(MUSL_BUILD_ENV
    "CC=${CMAKE_C_COMPILER}"
    "CFLAGS=\"${compile_options}\""
    "CROSS_COMPILE=${CROSS_COMPILER_PREFIX}"
    "MAKEFLAGS=\"\$\${MAKEFLAGS:--s}\""
)
include(memoize)
# memoize this installation rule which will save the resulting artifact in a
# cache and reuse it across builds. This will rebuild from source if the git
# directory has changes or has a changed commit hash.
memoize_add_custom_command(
    musllibc
    "${CMAKE_CURRENT_BINARY_DIR}/build-temp/stage"
    "${CMAKE_CURRENT_SOURCE_DIR}"
    "${compile_options} ${muslc_arch}"
    ""
    OUTPUT
    build-temp/stage/lib/libc.a
    # If we have to rebuild, first clear the temporary build directory as we
    # have no correctly captured the output files or dependencies
    COMMAND
    rm
    -r
    build-temp
    COMMAND
    mkdir
    -p
    build-temp
    COMMAND
    cd
    build-temp
    COMMAND
    cp
    -a
    "${CMAKE_CURRENT_SOURCE_DIR}"
    "src/"
    COMMAND
    rm
    -f
    src/.git
    COMMAND
    # Remove some arch specific assembly functions to fall back to the generic c implementations:
    rm
    src/src/thread/i386/__set_thread_area.s # force a call to syscall(SYS_set_thread_area)
    src/src/thread/x86_64/__set_thread_area.s # force a call to syscall(SYS_set_thread_area)
    COMMAND
    # Overwrite the syscalls to call a local symbol instead
    cp
    ${CMAKE_CURRENT_SOURCE_DIR}/patches/arch/${muslc_arch}/syscall_arch.h
    src/arch/${muslc_arch}/syscall_arch.h
    COMMAND
    "src/configure"
    "--srcdir=src/"
    "--prefix=${CMAKE_CURRENT_BINARY_DIR}/build-temp/stage"
    "--syslibdir=${CMAKE_CURRENT_BINARY_DIR}/build-temp/stage/lib"
    "--target=${muslc_arch}"
    # override malloc backend to use the legacy malloc implementation.
    # we should use ngmalloc, but it requires a more sophisticated mmap
    # implementation while oldmalloc can work with a dumb arena allocator
    # that doesn't support freeing (providing no memory allocations larger
    # than the mmap segment limit are ever freed.)
    "--with-malloc=oldmalloc"
    "--disable-shared"
    ${MUSL_BUILD_ENV}
    COMMAND
    make
    ${parallel}
    ${MUSL_BUILD_ENV}
    COMMAND
    make
    ${parallel}
    install-libs install-headers
    ${MUSL_BUILD_ENV}

    DEPENDS
    ${deps}
    COMMAND_EXPAND_LISTS
    COMMENT
    "Invoking muslc build system"
)

add_custom_target(muslc_gen DEPENDS build-temp/stage/lib/libc.a)

add_library(muslc_imported STATIC IMPORTED GLOBAL)
add_dependencies(muslc_imported muslc_gen)
set_property(
    TARGET muslc_imported
    PROPERTY IMPORTED_LOCATION "${CMAKE_CURRENT_BINARY_DIR}/build-temp/stage/lib/libc.a"
)

add_library(muslc INTERFACE)
add_dependencies(muslc muslc_imported)
set_property(TARGET muslc PROPERTY INTERFACE_LINK_LIBRARIES muslc_imported)
target_include_directories(muslc SYSTEM INTERFACE "${CMAKE_CURRENT_BINARY_DIR}/build-temp/stage/include")
